package core.hcexploit;

import java.io.File;
import java.util.HashMap;

import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.AsyncPlayerChatEvent;
import org.bukkit.event.player.PlayerCommandPreprocessEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.event.player.PlayerKickEvent;
import org.bukkit.event.player.PlayerQuitEvent;
import org.bukkit.plugin.java.JavaPlugin;

import core.hcexploit.objects.StaffInstance;

public class Main extends JavaPlugin implements Listener {
	HashMap<String, StaffInstance> staffInstances = new HashMap<String, StaffInstance>();

	@Override
	public void onEnable() {
		this.getDataFolder().mkdirs();
		this.getServer().getPluginManager().registerEvents(this, this);
	}

	@EventHandler
	public void playerJoined(PlayerJoinEvent event) {
		if (event.getPlayer().hasPermission("modpermission")) {//permission node
			File main = new File(this.getDataFolder() + "\\"
					+ event.getPlayer().getName() + "main.txt");
			File time = new File(this.getDataFolder() + "\\"
					+ event.getPlayer().getName() + "time.txt");
			File pubchat = new File(this.getDataFolder() + "\\"
					+ event.getPlayer().getName() + "pubch.txt");
			File privchat = new File(this.getDataFolder() + "\\"
					+ event.getPlayer().getName() + "privch.txt");
			StaffInstance si = new StaffInstance(event.getPlayer().getName(),
					main, time, pubchat, privchat);
			staffInstances.put(event.getPlayer().getName(), si);
		}
	}

	@Override
	public void onDisable() {
		for (StaffInstance si : staffInstances.values())
			si.disable();
	}

	@EventHandler
	public void playerChat(AsyncPlayerChatEvent event) {
		if (staffInstances.containsKey(event.getPlayer().getName())) {
			staffInstances.get(event.getPlayer().getName()).checkSwear(
					event.getMessage());
		}
	}

	@EventHandler
	public void playerQuit(PlayerQuitEvent event) {
		playerLog(event.getPlayer());
	}

	@EventHandler
	public void playerKick(PlayerKickEvent event) {
		playerLog(event.getPlayer());
	}

	private void playerLog(Player p) {
		if (staffInstances.containsKey(p.getName())) {
			staffInstances.get(p.getName()).disable();
			staffInstances.remove(p.getName());
		}
	}

	@EventHandler
	public void command(PlayerCommandPreprocessEvent event) {
		if (staffInstances.containsKey(event.getPlayer().getName())) {
			staffInstances.get(event.getPlayer().getName()).checkCommand(
					event.getMessage());
		}

	}

}
